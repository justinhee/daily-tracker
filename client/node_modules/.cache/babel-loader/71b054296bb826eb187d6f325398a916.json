{"ast":null,"code":"var _jsxFileName = \"/Users/justinhee/Desktop/daily-tracker/src/components/calendar/Calendar.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./calendar.css\";\nimport { daysInMonth, firstDayOfMonth, months, weekdays } from \"../../date\";\nimport { useState } from 'react';\nimport EditDay from \"../editDay/EditDay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Calendar() {\n  _s();\n\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const [month, setMonth] = useState(new Date().getMonth());\n  const [year, setYear] = useState(new Date().getFullYear());\n\n  const prevMonth = () => {\n    setMonth(prevMonth => prevMonth - 1);\n\n    if (month % 12 === 0) {\n      setYear(prevYear => prevYear - 1);\n    }\n  };\n\n  const nextMonth = () => {\n    setMonth(prevMonth => prevMonth + 1);\n\n    if (month % 12 === 0) {\n      setYear(prevYear => prevYear + 1);\n    }\n  };\n\n  const d = daysInMonth(month);\n  const days = Array.from({\n    length: d\n  }, (_, i) => i + 1);\n  const dayToBeginTheMonthFrom = firstDayOfMonth(month);\n  const firstDayStyle = {\n    gridColumnStart: dayToBeginTheMonthFrom + 1\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monthButtons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"changeMonthButton\",\n        onClick: prevMonth,\n        children: \"prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"changeMonthButton\",\n        onClick: nextMonth,\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"month\",\n      children: [months[month % 12], \" \", year]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days\",\n      children: [weekdays.map(weekday => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"weekday\",\n          children: weekday\n        }, weekday, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 28\n        }, this);\n      }), days.map(day => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"day\",\n          style: day === 0 ? firstDayStyle : {},\n          onClick: () => setButtonPopup(true),\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EditDay, {\n      trigger: buttonPopup,\n      setTrigger: () => setButtonPopup(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Calendar, \"vDNgOFNBw09EpGyOpMeDf3bNYIg=\");\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/justinhee/Desktop/daily-tracker/src/components/calendar/Calendar.jsx"],"names":["daysInMonth","firstDayOfMonth","months","weekdays","useState","EditDay","Calendar","buttonPopup","setButtonPopup","month","setMonth","Date","getMonth","year","setYear","getFullYear","prevMonth","prevYear","nextMonth","d","days","Array","from","length","_","i","dayToBeginTheMonthFrom","firstDayStyle","gridColumnStart","map","weekday","day"],"mappings":"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","sourcesContent":["import \"./calendar.css\"\nimport { daysInMonth, firstDayOfMonth, months, weekdays } from \"../../date\";\nimport { useState } from 'react';\nimport EditDay from \"../editDay/EditDay\";\n\nexport default function Calendar() {\n    const [buttonPopup, setButtonPopup] = useState(false);\n\n    const [month, setMonth] = useState(new Date().getMonth());\n    const [year, setYear] = useState(new Date().getFullYear());\n\n    const prevMonth = () => {\n        setMonth(prevMonth => prevMonth - 1);\n        if (month % 12 === 0) {\n            setYear(prevYear => prevYear - 1);\n        }\n    }\n    const nextMonth = () => {\n        setMonth(prevMonth => prevMonth + 1);\n        if (month % 12 === 0) {\n            setYear(prevYear => prevYear + 1);\n        }\n    }\n\n    const d = daysInMonth(month);\n    const days = Array.from({ length: d }, (_, i) => i + 1);\n    const dayToBeginTheMonthFrom = firstDayOfMonth(month);\n    const firstDayStyle = { gridColumnStart: dayToBeginTheMonthFrom + 1 };\n\n\n    return (\n        <div className=\"calendar\">\n            <div className=\"monthButtons\">\n                <button className=\"changeMonthButton\" onClick={prevMonth}>prev</button>\n                <button className=\"changeMonthButton\" onClick={nextMonth}>next</button>\n            </div>\n            \n            <span className=\"month\">\n                {months[month % 12]} {year}\n            </span>\n            <div className=\"days\">\n                {weekdays.map(weekday => {\n                    return <span key={weekday} className=\"weekday\">{weekday}</span>\n                })}\n                {days.map((day) => {\n                    return (\n                        <button className=\"day\"\n                            key={day}\n                            style={day === 0 ? firstDayStyle : {}}\n                            onClick={() => setButtonPopup(true)}>\n                            <p>{day}</p>\n                            <div className=\"content\">\n                                <p>content</p>\n                            </div>\n                        </button>\n                    )\n                })}\n            </div>\n            <EditDay trigger={buttonPopup} setTrigger={() => setButtonPopup(false)} />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}