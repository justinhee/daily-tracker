{"ast":null,"code":"var _jsxFileName = \"/Users/justinhee/Desktop/daily-tracker/client/src/components/calendar/Calendar.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./calendar.css\";\nimport { daysInMonth, firstDayOfMonth, months, weekdays } from \"../../date\";\nimport { useState } from 'react';\nimport EditDay from \"../editDay/EditDay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Calendar({\n  entries\n}) {\n  _s();\n\n  const [buttonPopup, setButtonPopup] = useState(false);\n  const [selectedDay, setSelectedDay] = useState(0);\n  const [month, setMonth] = useState(new Date().getMonth());\n  const [year, setYear] = useState(new Date().getFullYear());\n\n  const prevMonth = () => {\n    if (month === 0) {\n      setYear(prevYear => prevYear - 1);\n      setMonth(11);\n    } else {\n      setMonth(prevMonth => prevMonth - 1);\n    }\n  };\n\n  const nextMonth = () => {\n    if (month === 11) {\n      setYear(prevYear => prevYear + 1);\n      setMonth(0);\n    } else {\n      setMonth(prevMonth => prevMonth + 1);\n    }\n  };\n\n  const d = daysInMonth(month, year);\n  const days = Array.from({\n    length: d\n  }, (_, i) => i + 1);\n  const dayToBeginTheMonthFrom = firstDayOfMonth(month, year);\n  const firstDayStyle = {\n    gridColumnStart: dayToBeginTheMonthFrom + 1\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"monthButtons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"changeMonthButton\",\n        onClick: prevMonth,\n        children: \"prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"changeMonthButton\",\n        onClick: nextMonth,\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"month\",\n      children: [months[month], \" \", year]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days\",\n      children: [weekdays.map(weekday => {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"weekday\",\n          children: weekday\n        }, weekday, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 28\n        }, this);\n      }), days.map(day => {\n        const newmonth = month + 1;\n        const datestring = `${year}-${newmonth}-${day}`;\n        const entry = entries.find(entry => entry.date === datestring);\n        const content = entry.entry;\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"day\",\n          style: day === 1 ? firstDayStyle : {},\n          onClick: () => {\n            setSelectedDay(day);\n            setButtonPopup(true);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EditDay, {\n      trigger: buttonPopup,\n      setTrigger: () => setButtonPopup(false),\n      day: selectedDay,\n      month: month,\n      year: year\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Calendar, \"qpSF+Dk50eEG9ih4Kc7XUqg1psI=\");\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/justinhee/Desktop/daily-tracker/client/src/components/calendar/Calendar.jsx"],"names":["daysInMonth","firstDayOfMonth","months","weekdays","useState","EditDay","Calendar","entries","buttonPopup","setButtonPopup","selectedDay","setSelectedDay","month","setMonth","Date","getMonth","year","setYear","getFullYear","prevMonth","prevYear","nextMonth","d","days","Array","from","length","_","i","dayToBeginTheMonthFrom","firstDayStyle","gridColumnStart","map","weekday","day","newmonth","datestring","entry","find","date","content"],"mappings":"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","sourcesContent":["import \"./calendar.css\"\nimport { daysInMonth, firstDayOfMonth, months, weekdays } from \"../../date\";\nimport { useState } from 'react';\nimport EditDay from \"../editDay/EditDay\";\n\nexport default function Calendar({entries}) {\n    const [buttonPopup, setButtonPopup] = useState(false);\n    const [selectedDay, setSelectedDay] = useState(0);\n\n    const [month, setMonth] = useState(new Date().getMonth());\n    const [year, setYear] = useState(new Date().getFullYear());\n\n    const prevMonth = () => {\n        if (month === 0) {\n            setYear(prevYear => prevYear - 1);\n            setMonth(11);\n        } else {\n            setMonth(prevMonth => prevMonth - 1);\n        }\n    }\n    const nextMonth = () => {\n        if (month === 11) {\n            setYear(prevYear => prevYear + 1);\n            setMonth(0);\n        } else {\n            setMonth(prevMonth => prevMonth + 1);\n        }\n    }\n\n    const d = daysInMonth(month, year);\n    const days = Array.from({ length: d }, (_, i) => i + 1);\n    const dayToBeginTheMonthFrom = firstDayOfMonth(month, year);\n    const firstDayStyle = { gridColumnStart: dayToBeginTheMonthFrom + 1 };\n\n\n    return (\n        <div className=\"calendar\">\n            <div className=\"monthButtons\">\n                <button className=\"changeMonthButton\" onClick={prevMonth}>prev</button>\n                <button className=\"changeMonthButton\" onClick={nextMonth}>next</button>\n            </div>\n            \n            <span className=\"month\">\n                {months[month]} {year}\n            </span>\n            <div className=\"days\">\n                {weekdays.map(weekday => {\n                    return <span key={weekday} className=\"weekday\">{weekday}</span>\n                })}\n                {days.map((day) => {\n                    const newmonth = month+1;\n                    const datestring = `${year}-${newmonth}-${day}`;\n                    const entry = entries.find(entry => entry.date === datestring)\n                    const content = entry.entry;\n                    return (\n                        <button className=\"day\"\n                            key={day}\n                            style={day === 1 ? firstDayStyle : {}}\n                            onClick={() => {\n                                setSelectedDay(day);\n                                setButtonPopup(true);\n                            }}>\n                            <p>{day}</p>\n                            <div className=\"content\">\n                                <p></p>\n                            </div>\n                        </button>\n                    )\n                })}\n            </div>\n            <EditDay trigger={buttonPopup} setTrigger={() => setButtonPopup(false)} day={selectedDay} month={month} year={year}/>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}